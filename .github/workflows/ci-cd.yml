name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/streaming-platform

jobs:
  # Lint and test Python services
  python-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [read-api, alert-service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('services/${{ matrix.service }}/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd services/${{ matrix.service }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest black flake8 mypy
    
    - name: Lint with flake8
      run: |
        cd services/${{ matrix.service }}
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        cd services/${{ matrix.service }}
        black --check --diff .
    
    - name: Type check with mypy
      run: |
        cd services/${{ matrix.service }}
        mypy . --ignore-missing-imports
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        cd services/${{ matrix.service }}
        pytest tests/ --verbose --cov=. --cov-report=xml
      continue-on-error: true

  # Build and test Java/Flink jobs
  java-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job: [aggregation-job, anomaly-detection]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('streaming-jobs/${{ matrix.job }}/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
    
    - name: Run Maven tests
      run: |
        cd streaming-jobs/${{ matrix.job }}
        mvn clean test
    
    - name: Build JAR
      run: |
        cd streaming-jobs/${{ matrix.job }}
        mvn clean package -DskipTests
    
    - name: Upload JAR artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.job }}-jar
        path: streaming-jobs/${{ matrix.job }}/target/*.jar

  # Validate load test scripts
  loadtest-validation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Validate k6 scripts
      run: |
        k6 validate loadtests/k6-scripts/api-load-test.js
        k6 validate loadtests/k6-scripts/high-throughput-events.js

  # Build Docker images
  build-images:
    needs: [python-quality, java-quality]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        component:
          - name: read-api
            context: services/read-api
            dockerfile: Dockerfile
          - name: alert-service
            context: services/alert-service
            dockerfile: Dockerfile
          - name: event-producer
            context: ingestors/kafka-producer
            dockerfile: Dockerfile
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.component.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.component.context }}
        file: ${{ matrix.component.context }}/${{ matrix.component.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration tests
  integration-tests:
    needs: [build-images]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_DB: streaming_analytics
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install test dependencies
      run: |
        pip install pytest requests psycopg2-binary redis
    
    - name: Wait for services
      run: |
        sleep 10
    
    - name: Initialize database
      run: |
        PGPASSWORD=password psql -h localhost -U admin -d streaming_analytics -f infra/docker-compose/init-scripts/01-init-timescaledb.sql
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ --verbose
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: streaming_analytics
        POSTGRES_USER: admin
        POSTGRES_PASSWORD: password
        REDIS_HOST: localhost
        REDIS_PORT: 6379

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging (if main branch)
  deploy-staging:
    needs: [integration-tests, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f infra/k8s/staging/
    
    outputs:
      deployment-url: "https://staging.streaming-platform.example.com"

  # Load testing (staging)
  load-test-staging:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run load tests
      run: |
        k6 run loadtests/k6-scripts/api-load-test.js \
          --env BASE_URL=${{ needs.deploy-staging.outputs.deployment-url }} \
          --out json=loadtest-results.json
    
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: loadtest-results
        path: loadtest-results.json

  # Deploy to production (manual approval)
  deploy-production:
    needs: [load-test-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f infra/k8s/production/

  # Cleanup old images
  cleanup:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: 'streaming-platform-read-api'
        package-type: 'container'
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
